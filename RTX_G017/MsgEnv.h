#ifndef _msgEnv_H
#define _msgEnv_H

#define free_env 0
#define console_input 1
#define console_output 2
#define display_ack 3
#define wakeup 4
#define count_report 5
#define update_time 6
#define iProc 7

//////////////////////////////////////////////////////////////////////////////////////////

class MsgEnv
{
	char message[512];
	int messageType;
	int pidFrom;
	int pidTo;
	int time;
	int msgID;
	
	public:
	
		MsgEnv (void);
		~MsgEnv (void);
		
		char *getMessage (void);
		int getMessageType (void);
		int getPIDFrom (void);
		int getPIDTo (void);
		int getTime (void);
		int getMsgID(void);
		
		void setMessage (char*);
		void setMessageType (int);
		void setPIDFrom (int);
		void setPIDTo (int);
		void setTime (int);
		void setMsgID(int);
		
		void clear (void);
};

#endif

//////////////////////////////////////////////////////////////////////////////////////////

MsgEnv::MsgEnv (void)
{
}

//////////////////////////////////////////////////////////////////////////////////////////

MsgEnv::~MsgEnv (void)			// destructor, dangerous: turn destructor into cleanup before implementing?
{									// called automatically in C++
}

//////////////////////////////////////////////////////////////////////////////////////////

char* MsgEnv::getMessage (void){
	return message;
}

//////////////////////////////////////////////////////////////////////////////////////////
	
int MsgEnv::getMessageType (void){
	return messageType;}
	
//////////////////////////////////////////////////////////////////////////////////////////
	
int MsgEnv::getPIDFrom (void){
	return pidFrom;}

//////////////////////////////////////////////////////////////////////////////////////////
	
int MsgEnv::getPIDTo (void){
	return pidTo;}

//////////////////////////////////////////////////////////////////////////////////////////

int MsgEnv::getTime (void){
	return time;}

//////////////////////////////////////////////////////////////////////////////////////////

int MsgEnv::getMsgID(void) {
	return msgID;
}

//////////////////////////////////////////////////////////////////////////////////////////

void MsgEnv::setMessage (char *msg)
{
	strcpy(message,msg);
}

//////////////////////////////////////////////////////////////////////////////////////////

void MsgEnv::setMessageType (int msgType){
	messageType = msgType;}
	
//////////////////////////////////////////////////////////////////////////////////////////

void MsgEnv::setPIDFrom (int pid){
	pidFrom = pid;}

//////////////////////////////////////////////////////////////////////////////////////////
	
void MsgEnv::setPIDTo (int pid){
	pidTo = pid;}

//////////////////////////////////////////////////////////////////////////////////////////
	
void MsgEnv::setTime (int t){
	time = t;}

//////////////////////////////////////////////////////////////////////////////////////////

void MsgEnv::setMsgID(int id) {
	msgID = id;
}

//////////////////////////////////////////////////////////////////////////////////////////

void MsgEnv::clear(void)
{	
	int i;
	
	memset(message,'\0',512);
	
	pidFrom = -1;
	pidTo = -1;
	messageType = free_env;		//set message type to "free" (4)
	time = -1;
	
}

//////////////////////////////////////////////////////////////////////////////////////////